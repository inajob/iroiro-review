<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Makerfabs on inajobのいろいろレビュー</title>
    <link>https://inajob.github.io/iroiro-review/tags/makerfabs/</link>
    <description>Recent content in Makerfabs on inajobのいろいろレビュー</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 27 Feb 2022 23:30:43 +0000</lastBuildDate>
    
	<atom:link href="https://inajob.github.io/iroiro-review/tags/makerfabs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ESP32を搭載した携帯ゲームエミュレータ「ESPlay Micro V2」</title>
      <link>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E6%90%AD%E8%BC%89%E3%81%97%E3%81%9F%E6%90%BA%E5%B8%AF%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFesplay-micro-v2/</link>
      <pubDate>Sun, 27 Feb 2022 23:30:43 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E6%90%AD%E8%BC%89%E3%81%97%E3%81%9F%E6%90%BA%E5%B8%AF%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFesplay-micro-v2/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/esplay-micro-v2-cover.jpg"&gt;この記事はMakerfabsの提供でお届けします。
今回紹介するESPlay Micro V2はMakerfabsから提供いただいたものです。
（ですが、ESPlay Micro V2をレビューしたい！と言ったのは自分なので、Makerfabsが無理やりこの商品を押しているわけではなく、inajobの一押しアイテム！、という感じです。）
ESPlay Micro V2とは ESPlay Micro V2はオープンソースの携帯ゲーム機です。
コアとなるマイコンはESP32で、様々なレトロゲームのエミュレータが動作する、本格的なゲーム機です。
仕様   ESP32-WROOBER
 という事で技適もあります。日本で使っても安心。    十字キー+ A,B, L,R, Start, Selectボタン
  I2C接続IOエキスパンダIC PCF8574
  I2S DAC IC UDA1334A (PAM8403?)
  イヤホンジャック端子
  USBシリアル変換IC CH340G
  320*240 TFT ディスプレイ
  アクリル板による筐体
  MicroSDカードスロット搭載（MicroSDカードも8GBのものが同梱されていました）
  拡張用I2C端子
  800mAh LiPo電池 （TODO 容量を書く）
  充電IC TP4054</description>
    </item>
    
    <item>
      <title>ATSAMD21搭載CircuitPythonでゲームが作れる激安携帯ゲーム端末「PewPew Standalone」</title>
      <link>https://inajob.github.io/iroiro-review/post/atsamd21%E6%90%AD%E8%BC%89circuitpython%E3%81%A7%E3%82%B2%E3%83%BC%E3%83%A0%E3%81%8C%E4%BD%9C%E3%82%8C%E3%82%8B%E6%BF%80%E5%AE%89%E6%90%BA%E5%B8%AF%E3%82%B2%E3%83%BC%E3%83%A0%E7%AB%AF%E6%9C%ABpewpew-standalone/</link>
      <pubDate>Sun, 06 Feb 2022 12:00:07 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/atsamd21%E6%90%AD%E8%BC%89circuitpython%E3%81%A7%E3%82%B2%E3%83%BC%E3%83%A0%E3%81%8C%E4%BD%9C%E3%82%8C%E3%82%8B%E6%BF%80%E5%AE%89%E6%90%BA%E5%B8%AF%E3%82%B2%E3%83%BC%E3%83%A0%E7%AB%AF%E6%9C%ABpewpew-standalone/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/pewpew-standalone-cover.jpg"&gt;この記事はMakerfabsの提供でお届けします。
今回紹介するPewPew StandaloneはMakerfabsから提供いただいたものです。
（ですが、PewPew Standaloneをレビューしたい！と言ったのは自分なので、Makerfabsが無理やりこの商品を押しているわけではなく、inajobの一押しアイテム！、という感じです。）
PewPew Standaloneとは PewPew Standaloneはオープンソースの携帯ゲーム機です。
ゲーム機と言っていますが、その性質は開発用プロトタイプボード、といった雰囲気のもので、この製品も基板むき出しで、ケースなどは付属していません。
仕様  ATSAMD21 8x8 ドットマトリクス赤色LED Micro USB接続（データ専用） 単4電池x2 駆動 十字ボタン+2ボタン = 6ボタン 拡張端子 オープンソースハードウェア 電源スイッチ M2と思われる固定用の穴（ケースは付属しません）  さらに細かい仕様は公式サイトを見てみてください。
遊んでみる 乾電池を入れて電源を入れると、初期ゲームが起動します。 ゲームランチャーが起動し、上下キーでいくつかのゲームを選んで起動することが出来ます。
 frog snake othello  乾電池が手元に無く、USBケーブルをつないで起動するか？と思いましたが、このゲーム機はこれでは起動しません。USBケーブルはデータ転送のみで電源は乾電池から得るという設計のようです。
もっというと、この基板上にはUSBからの5Vを3.3Vに降圧するためのレギュレータを搭載するためのフットプリントが存在しますが、実装されていません。確かにこれが無くても、乾電池さえ入れていればうまく動くので、「必要な人は取り付けてね」というスタンスなのでしょう。
ゲームを起動して気づくのは、単色のドットマトリクスLEDですが、階調表示を実現していることです。
ソースコードを見ると、どうやら4階調までサポートしているようですが、正直なところ消灯、中間、フルパワーの3段階がなんとか視認できるという程度で、あまり見やすいとは言えない表示方法のように見えました。
キーの入力も取りこぼしが多く、こちらもソースコードを見たところメインループの処理をゲームスピードに合わせて律速していると、キーのスキャンもそれに合わせて律速されてしまうようで、このせいで操作性が悪くなっているようでした。まぁ、この点はプログラムの書き方で改善できそうです。
パソコンとつないでみる（ゲーム開発編） パソコンとつなげると、マスストレージデバイスとしてふるまい、普通のUSBメモリのように認識されてファイル一覧を見ることが出来ます。
これはCircuitPythonの仕組みを利用しているようです。
前項で遊んだゲームはmain.pyに記述されたランチャーから各ゲームのスクリプト呼び出すことで実現しています。
ゲームを開発するときは、ドライブ直下にcode.pyというファイルを作り、それを編集することで動作を検証することが出来ます。
保存するたびにゲームが再読み込みされるような動作をするため、スムーズに開発をすることが出来ます。
例えば以下のような内容のcode.pyを作って保存することで、画面に顔マークを横スクロールで表示できます。
import pew pew.init() face = pew.Pix.from_iter(( (0, 0, 3, 3, 3, 3, 0, 0), (0, 3, 0, 0, 0, 0, 3, 0), (3, 0, 3, 0, 0, 3, 0, 3), (3, 0, 3, 0, 0, 3, 0, 3), (3, 0, 0, 0, 0, 0, 0, 3), (3, 0, 3, 3, 3, 3, 0, 3), (0, 3, 0, 0, 0, 0, 3, 0), (0, 0, 3, 3, 3, 3, 0, 0), )) screen = pew.</description>
    </item>
    
  </channel>
</rss>

