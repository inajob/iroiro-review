<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ESP32 on inajobのいろいろレビュー</title>
    <link>https://inajob.github.io/iroiro-review/tags/esp32/</link>
    <description>Recent content in ESP32 on inajobのいろいろレビュー</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 27 Mar 2022 13:00:18 +0000</lastBuildDate>
    
	<atom:link href="https://inajob.github.io/iroiro-review/tags/esp32/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>カメラ、液晶、タッチ、全部入りのESP32開発ボード</title>
      <link>https://inajob.github.io/iroiro-review/post/%E3%82%AB%E3%83%A1%E3%83%A9%E6%B6%B2%E6%99%B6%E3%82%BF%E3%83%83%E3%83%81%E5%85%A8%E9%83%A8%E5%85%A5%E3%82%8A%E3%81%AEesp32%E9%96%8B%E7%99%BA%E3%83%9C%E3%83%BC%E3%83%89/</link>
      <pubDate>Sun, 27 Mar 2022 13:00:18 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/%E3%82%AB%E3%83%A1%E3%83%A9%E6%B6%B2%E6%99%B6%E3%82%BF%E3%83%83%E3%83%81%E5%85%A8%E9%83%A8%E5%85%A5%E3%82%8A%E3%81%AEesp32%E9%96%8B%E7%99%BA%E3%83%9C%E3%83%BC%E3%83%89/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/esp32-tft-board-with-camera-cover.jpg"&gt;この記事はMakerfabsの提供でお届けします。
今回紹介するESP32 3.5&amp;quot; TFT Touch(Capacitive) with CameraはMakerfabsから提供いただいたものです。
（ですが、ESP32 3.5&amp;quot; TFT Touch(Capacitive) with Cameraをレビューしたい！と言ったのは自分なので、Makerfabsが無理やりこの商品を押しているわけではなく、inajobの一押しアイテム！、という感じです。）
ESP32 3.5&amp;quot; TFT Touch(Capacitive) with Cameraとは ESP32 3.5&amp;quot; TFT Touch(Capacitive) with CameraはMakerfabsはオープンソースのESP32を搭載した開発ボードです。
コアとなるマイコンはESP32で以下の機能があります
 ESP32-WROVER-B (技適あり) 3.5インチ 320*480 TFT 静電容量式タッチパネル 2Mピクセルのカメラモジュール USB書き込み(USB Type-C) MicroSDカードスロット（with 16GB MicroSDカード) 15ピンの拡張端子  デフォルトのファームウェアを試してみる USBケーブルをつなげるとデフォルトのファームウェアが起動します。
これはここにあるデジカメのような動作をするファームウェアのようです。
カメラの内容をリアルタイムにディスプレイに表示し、ボタンをタッチすることで写真をSDカードに保存することが出来ます。
カメラについては最近のスマートフォン比べると明らかに劣りますが、一応写真が取れる、という感じです。 （このファームウェアでは320 * 240の写真しか撮れないようでした。カメラの性能を考えるともっと高解像度の画像も撮影できるはずです。）
自分オリジナルの低画質なデジカメは、このファームウェアをちょっと改造するだけで作れそうです。
見どころ この商品は、ESP32と320*480のディスプレイ、カメラが搭載された、リーズナブルな開発ボードです。 IoTでこれらの部品を組み合わせたプロトタイピングを行う際に利用できそうです。
WiFiやBluetoothも使うことが出来、今流行りのIoT的なガジェットを作る際も役立ちそうです。ESP32-WROVER-Bは技適も取得しているので、日本でも安心して利用できる点もポイントです。
注意点としては、この製品には充電池は搭載されていないためスタンドアローンのガジェットを作りたいときは電源については別に考える必要があるという点と、カメラの画質はそこまで良くないという点です。
アクリル板を重ねて作ったケースもアドオンで販売されているので、裸で運用するのが怖い人は合わせて購入するのがよさそうです。
アイデア 自分が考えるこのボードで作れそうなアイデアを挙げてみると・・
 自分オリジナルのデジカメ（キャラクタが映りこむとか、撮影するとWiFiで即座にアップロードされるとか） 高解像度を生かしたゲーム（フレームレートを高めるのはコツが必要そう） デジタルフォトフレーム 電子情報端末（小型パソコンのようなもの） スマートセンサーの頭脳と表示装置  という感じです。
自分でボードから設計するとなると相当大変ですが、ESP32 3.5&amp;quot; TFT Touch(Capacitive) with CameraはMakerfabsのような開発ボードを利用することで、ソフトウェア開発だけで実現できます。</description>
    </item>
    
    <item>
      <title>ESP32で電波時計を合わせるテクニック</title>
      <link>https://inajob.github.io/iroiro-review/post/esp32%E3%81%A7%E9%9B%BB%E6%B3%A2%E6%99%82%E8%A8%88%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</link>
      <pubDate>Wed, 09 Mar 2022 23:00:00 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/esp32%E3%81%A7%E9%9B%BB%E6%B3%A2%E6%99%82%E8%A8%88%E3%82%92%E5%90%88%E3%82%8F%E3%81%9B%E3%82%8B%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/ESP32で電波時計を合わせるテクニック.jpg"&gt;ESP32 (M5Stick-C) で電波時計を合わせようから発見。画像もここから転載。
電波時計は時刻を勝手に合わせてくれて便利ですが、電波をうまく拾えない環境や、天災やメンテナンスによる標準電波の停波などにより、うまく時刻が合わせられないことがあります。
この記事では、M5Stick-Cをつかって簡単に標準電波を発生させる手法が紹介されています。 アンテナが必要か、、と思いきや、電波時計にかなり近づけることでアンテナすら不要で電波時計の時計を合わせることができるようです。
このテクニックを使えば、電波時計を改造することなく好きな時刻に設定できる時計ガジェットも作ることができそうです。</description>
    </item>
    
    <item>
      <title>ESP32を使った省エネの動体検知カメラ</title>
      <link>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E7%9C%81%E3%82%A8%E3%83%8D%E3%81%AE%E5%8B%95%E4%BD%93%E6%A4%9C%E7%9F%A5%E3%82%AB%E3%83%A1%E3%83%A9/</link>
      <pubDate>Tue, 01 Mar 2022 13:00:53 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E7%9C%81%E3%82%A8%E3%83%8D%E3%81%AE%E5%8B%95%E4%BD%93%E6%A4%9C%E7%9F%A5%E3%82%AB%E3%83%A1%E3%83%A9/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/power-save-esp32cam.jpg"&gt;ESP32-CAM Low Power Trail Cameraから発見。画像もここから転載。 ESP32はパワフルなマイコンですが、その分消費電力も大きいです。
ディープスリープモードなどもありますが、制御がややこしかったり、それでもある程度は電力を消費してしまいます。 また、当たり前ですがスリープモード中は大した処理が実行できません。
この記事で紹介しているのは、動物が近づいたときに自動的にカメラで撮影するガジェットを省電力で実現する手法です。
具体的には人感センサーを用いて、ESP32の電源を外から制御しています。
一度電源がONになったらESP32が既定の処理が終わるまでは電源がOFFにならないように工夫して設計されています。
この方式は他のマイコンでも有効なので、いろいろと応用がききそうです。</description>
    </item>
    
    <item>
      <title>ESP32を搭載した携帯ゲームエミュレータ「ESPlay Micro V2」</title>
      <link>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E6%90%AD%E8%BC%89%E3%81%97%E3%81%9F%E6%90%BA%E5%B8%AF%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFesplay-micro-v2/</link>
      <pubDate>Sun, 27 Feb 2022 23:30:43 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E6%90%AD%E8%BC%89%E3%81%97%E3%81%9F%E6%90%BA%E5%B8%AF%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BFesplay-micro-v2/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/esplay-micro-v2-cover.jpg"&gt;この記事はMakerfabsの提供でお届けします。
今回紹介するESPlay Micro V2はMakerfabsから提供いただいたものです。
（ですが、ESPlay Micro V2をレビューしたい！と言ったのは自分なので、Makerfabsが無理やりこの商品を押しているわけではなく、inajobの一押しアイテム！、という感じです。）
ESPlay Micro V2とは ESPlay Micro V2はオープンソースの携帯ゲーム機です。
コアとなるマイコンはESP32で、様々なレトロゲームのエミュレータが動作する、本格的なゲーム機です。
また、このゲーム機は以前紹介したESP32を搭載した携帯ゲーム機「ESPlay Micro」 の後継機種です。
仕様   ESP32-WROOBER
 という事で技適もあります。日本で使っても安心。    十字キー+ A,B, L,R, Start, Selectボタン
  I2C接続IOエキスパンダIC PCF8574
  I2S DAC IC UDA1334A (PAM8403?)
  イヤホンジャック端子
  USBシリアル変換IC CH340G
  320*240 TFT ディスプレイ
  アクリル板による筐体
  MicroSDカードスロット搭載（MicroSDカードも8GBのものが同梱されていました）
  拡張用I2C端子
  800mAh LiPo電池
  充電IC TP4054</description>
    </item>
    
    <item>
      <title>ArduinoでプログラミングできるWiFiにも対応したレシートプリンタ「ATOM Printer」</title>
      <link>https://inajob.github.io/iroiro-review/post/arduino%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A7%E3%81%8D%E3%82%8Bwifi%E3%81%AB%E3%82%82%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%9F%E3%83%AC%E3%82%B7%E3%83%BC%E3%83%88%E3%83%97%E3%83%AA%E3%83%B3%E3%82%BFatom-printer/</link>
      <pubDate>Mon, 31 Jan 2022 12:30:48 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/arduino%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%A7%E3%81%8D%E3%82%8Bwifi%E3%81%AB%E3%82%82%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%9F%E3%83%AC%E3%82%B7%E3%83%BC%E3%83%88%E3%83%97%E3%83%AA%E3%83%B3%E3%82%BFatom-printer/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/atom-printer-cover.jpg"&gt;この記事はBanggoodの提供でお届けします。
以前紹介したようにこのブログはBanggoodと提携させていただいており、今回紹介するM5Stack ATOM Printerも、Banggoodからいただいたものとなります。（M5Stack ATOM Printerのレビューがしたい！と言ったのは自分なので、Banggoodが無理やりこの商品を押しているわけではなく、inajobの一押しアイテム！、という感じです。）
ATOM Thermal Printer Kit とは この商品はM5Stack社のATOM Liteという小型モジュールに感熱紙プリンタがくっついたものです。
ATOM LiteのコアはESP32-Pico-D4で、もちろんWiFiをサポートしています。
WiFiで指示を受け取り、感熱紙に文字や画像を印刷するようなプロトタイピングを迅速に開発できます。
仕様  ATOM Lite: ESP32-Pico-D4 4MB Flash 技適付き ボール紙による筐体 UARTによる制御  使用前の準備 この製品を使うためには、12VのACアダプタが必要です、また書き込みのためにはATOM Liteに接続するためのUSB Type-Cケーブルが必要です。
ACアダプタは12V2.5A以上のものが必要と書いてありましたが、我が家には2Aの物しかなく、これで動かしています。
12VのACアダプタをつなげれば・・と思いましたが、どうも初期ファームウェアに不具合があるようで、WiFiに接続できないエラーが延々と出力されてしまいます。
この問題はM5Stack社に報告したので、近いうちに修正されると思いますが、同様の問題に遭遇した人のために修正方法を記載しておきます。
ファームウェアの不具合による問題からの復旧（症状が起きている場合のみ） 症状としては、AC12Vで電源を入れた時にプリンタから「Mode: UIFLOW」「WiFi Password Erro！」という文字が延々と印刷されるというものです。 期待する挙動としてはATOM Liteのボタンを押すことでModeがAPとなることなのですが、どうもこれがうまく動かないようです。
ここまでの症状が同じ場合は、以下の手順で復旧が出来ます。
この初期ファームウェアのソースコードは以下に存在しています。
https://github.com/m5stack/ATOM-PRINTER/blob/master/examples/FactoryTest/FactoryTest.ino
このリポジトリをGitを使い手元にCloneし、Arduino IDEで開きます。
Arduino IDEでATOM Liteの開発をするためにはUSBシリアルドライバのインストールと、ボードのインストール・ライブラリのインストールが必要です。以下を参考に設定します。
https://docs.m5stack.com/en/quick_start/atom/arduino
FactoryTest.inoがビルドできることを確認出来たら、少し内容を修正します。
具体的には、この80行目の後に preferences.putBool(&amp;quot;PRINTER_MODE&amp;quot;, APMode);という行を入れます。
https://github.com/m5stack/ATOM-PRINTER/blob/master/examples/FactoryTest/FactoryTest.ino#L130
この修正を行ったFactoryTest.inoを一度書き込んで実行すれば、後は元に戻したFactoryTest.inoでもうまく動作します。
おそらくこれはATOM Printerの製品の検品時に、テスト用のWiFiのAPに接続するテストを行っていることが原因です。
現在のファームウェアは一度設定されたWiFiに接続できることを前提に処理が組まれており、つながらない場合は本体をリセットし続けて接続できるのを待ってしまいます。
しかし当然我が家にはATOM Printerの検品時に接続していたWiFiがあるわけもなく、何度リセットしても接続できません。
WiFiの設定は不揮発メモリに保持されているため、ファームウェアを書き直してもWiFiの設定が消えません。
ここに記載した処理は、WiFiの設定が存在していてもそれを無視してAPモードとして振舞うように不揮発メモリに記録するというものです。
一度モードを不揮発メモリに記録すれば、この問題は解消します。
おそらくこの問題は近いうちに解消すると思います。手元でこの問題が起こらない場合はこの対応は不要です。
動作確認 さてお待ちかねの動作確認です。
APモードで起動したATOM PrinterはWiFiのAPとして振舞います。 手元のスマートフォンなどで、WiFiスポットを調べてみると ATOM Printerという文字を含むSSIDが見えると思います。 そのWiFiにスマートフォンを接続し、ATOM Printerから印字されたIPアドレスにブラウザからアクセスすることで、プリンタを制御するためのWebUIを表示することが出来ます。</description>
    </item>
    
    <item>
      <title>ゲームボーイアドバンスをESP32の力でBluetoothゲームコントローラにするHACK</title>
      <link>https://inajob.github.io/iroiro-review/post/%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%9C%E3%83%BC%E3%82%A4%E3%82%A2%E3%83%89%E3%83%90%E3%83%B3%E3%82%B9%E3%82%92esp32%E3%81%AE%E5%8A%9B%E3%81%A7bluetooth%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AB%E3%81%99%E3%82%8Bhack/</link>
      <pubDate>Tue, 23 Nov 2021 12:00:36 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%9C%E3%83%BC%E3%82%A4%E3%82%A2%E3%83%89%E3%83%90%E3%83%B3%E3%82%B9%E3%82%92esp32%E3%81%AE%E5%8A%9B%E3%81%A7bluetooth%E3%82%B2%E3%83%BC%E3%83%A0%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AB%E3%81%99%E3%82%8Bhack/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/gba-meets-esp32.jpg"&gt;Game Boy Advance Bluetooth HIDから発見。画像もここから転載。
ゲームボーイアドバンスには通信ケーブルのポートがあります。このポートは通信対戦などで用いるのですが、その際カセットが刺さっていない端末にもプログラムを転送する機能があります。
この記事では、この機能を逆手にとって通信ポートから独自のプログラムを流し込んで実行するという手法を使い、ESP32をゲームボーイアドバンスに接続し、Bluetoothゲームコントローラとして利用できるようにするHACKを紹介しています。
ゲームコントローラにする以外にもこの通信ポートを使ったHACKは利用できそうです。</description>
    </item>
    
    <item>
      <title>ESP32を搭載した携帯ゲーム機「ESPlay Micro」</title>
      <link>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E6%90%AD%E8%BC%89%E3%81%97%E3%81%9F%E6%90%BA%E5%B8%AF%E3%82%B2%E3%83%BC%E3%83%A0%E6%A9%9Fesplay-micro/</link>
      <pubDate>Tue, 02 Nov 2021 23:00:22 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E6%90%AD%E8%BC%89%E3%81%97%E3%81%9F%E6%90%BA%E5%B8%AF%E3%82%B2%E3%83%BC%E3%83%A0%E6%A9%9Fesplay-micro/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/esplay-micro.jpg"&gt;ESPlay Micro - Open Source ESP32 Game Consoleから発見。画像もここから転載。
ESPlay MicroはESP32を搭載した携帯ゲーム機です。
十字ボタンとA,B、L,R、Start,Selectなど、ゲームを操作するのに必要なボタンが搭載され、バッテリーチャージ回路、I2Sオーディオ、3.5mmオーディオジャックなど、携帯ゲーム機としては十分な機能を持っています。
ESP32はパワフルなマイコンで、レトロゲームのエミュレータなども多く移植されています。</description>
    </item>
    
    <item>
      <title>シンプルなOLED搭載のESP32開発ボード</title>
      <link>https://inajob.github.io/iroiro-review/post/%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AAoled%E6%90%AD%E8%BC%89%E3%81%AEesp32%E9%96%8B%E7%99%BA%E3%83%9C%E3%83%BC%E3%83%89/</link>
      <pubDate>Sun, 29 Aug 2021 11:00:19 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/%E3%82%B7%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AAoled%E6%90%AD%E8%BC%89%E3%81%AEesp32%E9%96%8B%E7%99%BA%E3%83%9C%E3%83%BC%E3%83%89/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/makepython-esp32.jpg"&gt;MakePython ESP32から発見。画像もここから転載。
128x64のOLEDを搭載した安価なESP32開発ボードです。PSRAM搭載のWROVER版もあり、普通のDevKitにOLEDを取り付けてプロトタイピングをしている方には最適です。</description>
    </item>
    
    <item>
      <title>ESP32を使うと簡単にBluetoothキーボードっぽいものが作れる</title>
      <link>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E7%B0%A1%E5%8D%98%E3%81%ABbluetooth%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%A3%E3%81%BD%E3%81%84%E3%82%82%E3%81%AE%E3%81%8C%E4%BD%9C%E3%82%8C%E3%82%8B/</link>
      <pubDate>Wed, 09 Jun 2021 12:00:47 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/esp32%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E7%B0%A1%E5%8D%98%E3%81%ABbluetooth%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%A3%E3%81%BD%E3%81%84%E3%82%82%E3%81%AE%E3%81%8C%E4%BD%9C%E3%82%8C%E3%82%8B/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/bluetooth-hid.png"&gt;EMULATING A BLUETOOTH KEYBOARD WITH THE ESP32から発見。画像もここから転載。
ESP32は非常に強力なマイコンで、しかもかなり安く手に入ります。
 ESP32はWiFiとBluetoothをサポートしており、WiFiはよく使われていますが、Bluetoothについては、あまり使用例を見かけないかもしれません。
しかし、この記事にあるようにESP32を使うと非常に簡単にBluetoothキーボードっぽいガジェットを作ることが出来ます。
いくつかのスイッチをESP32に接続し、すでに存在しているHIDのライブラリをちょっと利用すればあっという間にBluetooth接続のキーボードやゲームパッドの完成です。
オリジナルのキーボードやゲームパッドのアイデアのある方は試してみてはどうでしょうか？
 </description>
    </item>
    
    <item>
      <title>ソートアルゴリズムを可視化する装置</title>
      <link>https://inajob.github.io/iroiro-review/post/%E3%82%BD%E3%83%BC%E3%83%88%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E5%8F%AF%E8%A6%96%E5%8C%96%E3%81%99%E3%82%8B%E8%A3%85%E7%BD%AE/</link>
      <pubDate>Sun, 30 May 2021 10:00:17 +0000</pubDate>
      
      <guid>https://inajob.github.io/iroiro-review/post/%E3%82%BD%E3%83%BC%E3%83%88%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E5%8F%AF%E8%A6%96%E5%8C%96%E3%81%99%E3%82%8B%E8%A3%85%E7%BD%AE/</guid>
      <description>&lt;img src="https://inajob.github.io/iroiro-review/img/algorithm-machine.jpg"&gt;The Algorithm Machineから発見。画像もここから転載。(CC BY-NC-SA by thatguyer)
ソートのアルゴリズムは様々あり、これを始めて学ぶ人は面食らってしまう人も多いと思います。
そこでこの記事では「ソートのアルゴリズム」を可視化する装置を作っています。
フルカラーLEDを横一列に大量に並べ、それをソート中の配列とみなし、さらにそれと並行して、現在比較している配列の要素を示す▽を示すLEDを配置しています。
ボタンの操作により様々なソートのアルゴリズムの動作例を目で見て確かめることが出来ます。
 </description>
    </item>
    
  </channel>
</rss>

